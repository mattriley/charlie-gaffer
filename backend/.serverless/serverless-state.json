{
  "service": {
    "service": "web-backend",
    "serviceObject": {
      "name": "web-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "stage": "test",
      "region": "ap-southeast-2",
      "environment": {
        "AWS_SES_REGION": "us-west-2",
        "AWS_SES_IDENTITY": "charliemoukbel.com",
        "NOTIFICATION_FROM_ADDRESS": "charliemoukbel.com <noreply@charliemoukbel.com>",
        "NOTIFICATION_TO_ADDRESS": "matthewriley.charliemoukbel+test@gmail.com",
        "GOOGLE_RECAPTCHA_SECRET_KEY": "6LeQMAsUAAAAAKPAErOaKV3UjMxbDUv-6QSZX6Cf",
        "MESSAGES_TABLE_NAME": "messages-test"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem"
          ],
          "Resource": [
            {
              "Fn::Join": [
                ":",
                [
                  "arn:aws:dynamodb",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "table/messages-test"
                ]
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ses:SendEmail"
          ],
          "Resource": [
            {
              "Fn::Join": [
                ":",
                [
                  "arn:aws:ses",
                  "us-west-2",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "*"
                ]
              ]
            }
          ]
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ContactMeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/web-backend-test-contactMe"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "web-backend",
                        "test",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/web-backend-test*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/web-backend-test*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "web-backend",
                    "test",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ContactMeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/web-backend/test/1657361896020-2022-07-09T10:18:16.020Z/web-backend.zip"
              },
              "Handler": "src/lambda.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "web-backend-test-contactMe",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_SES_REGION": "us-west-2",
                  "AWS_SES_IDENTITY": "charliemoukbel.com",
                  "NOTIFICATION_FROM_ADDRESS": "charliemoukbel.com <noreply@charliemoukbel.com>",
                  "NOTIFICATION_TO_ADDRESS": "matthewriley.charliemoukbel+test@gmail.com",
                  "GOOGLE_RECAPTCHA_SECRET_KEY": "6LeQMAsUAAAAAKPAErOaKV3UjMxbDUv-6QSZX6Cf",
                  "MESSAGES_TABLE_NAME": "messages-test"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ContactMeLogGroup"
            ]
          },
          "ContactMeLambdaVersionYP8QQnLgvNQr1GUH23kibNs56XIiL0TIHkGZhuuYOE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ContactMeLambdaFunction"
              },
              "CodeSha256": "phTUOQPqMuoRm2fjkvFwgR8ymcNQn87N9w+gOnAPx9M="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "test-web-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceContactDashme": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "contact-me",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodContactDashmeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceContactDashme"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodContactDashmePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContactDashme"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ContactMeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ContactMeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1657361890982": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "test"
            },
            "DependsOn": [
              "ApiGatewayMethodContactDashmeOptions",
              "ApiGatewayMethodContactDashmePost"
            ]
          },
          "ContactMeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ContactMeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AwsAlertsAlarm": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "web-backend-test-alerts-alarm",
              "Subscription": [
                {
                  "Protocol": "email",
                  "Endpoint": "matthewriley.charliemoukbel+test@gmail.com"
                }
              ]
            }
          },
          "ContactMeFunctionErrorsAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "ActionsEnabled": true,
              "Namespace": "AWS/Lambda",
              "MetricName": "Errors",
              "Threshold": 1,
              "Period": 60,
              "EvaluationPeriods": 1,
              "DatapointsToAlarm": 1,
              "ComparisonOperator": "GreaterThanOrEqualToThreshold",
              "OKActions": [],
              "AlarmActions": [
                {
                  "Ref": "AwsAlertsAlarm"
                }
              ],
              "InsufficientDataActions": [],
              "Dimensions": [
                {
                  "Name": "FunctionName",
                  "Value": {
                    "Ref": "ContactMeLambdaFunction"
                  }
                }
              ],
              "TreatMissingData": "missing",
              "Statistic": "Sum"
            }
          },
          "ContactMeFunctionThrottlesAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "ActionsEnabled": true,
              "Namespace": "AWS/Lambda",
              "MetricName": "Throttles",
              "Threshold": 1,
              "Period": 60,
              "EvaluationPeriods": 1,
              "DatapointsToAlarm": 1,
              "ComparisonOperator": "GreaterThanOrEqualToThreshold",
              "OKActions": [],
              "AlarmActions": [
                {
                  "Ref": "AwsAlertsAlarm"
                }
              ],
              "InsufficientDataActions": [],
              "Dimensions": [
                {
                  "Name": "FunctionName",
                  "Value": {
                    "Ref": "ContactMeLambdaFunction"
                  }
                }
              ],
              "TreatMissingData": "missing",
              "Statistic": "Sum"
            }
          },
          "ContactMeFunctionInvocationsAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "ActionsEnabled": true,
              "Namespace": "AWS/Lambda",
              "MetricName": "Invocations",
              "Threshold": 100,
              "Period": 60,
              "EvaluationPeriods": 1,
              "DatapointsToAlarm": 1,
              "ComparisonOperator": "GreaterThanOrEqualToThreshold",
              "OKActions": [],
              "AlarmActions": [
                {
                  "Ref": "AwsAlertsAlarm"
                }
              ],
              "InsufficientDataActions": [],
              "Dimensions": [
                {
                  "Name": "FunctionName",
                  "Value": {
                    "Ref": "ContactMeLambdaFunction"
                  }
                }
              ],
              "TreatMissingData": "missing",
              "Statistic": "Sum"
            }
          },
          "ContactMeFunctionDurationAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "ActionsEnabled": true,
              "Namespace": "AWS/Lambda",
              "MetricName": "Duration",
              "Threshold": 500,
              "Period": 60,
              "EvaluationPeriods": 1,
              "DatapointsToAlarm": 1,
              "ComparisonOperator": "GreaterThanOrEqualToThreshold",
              "OKActions": [],
              "AlarmActions": [
                {
                  "Ref": "AwsAlertsAlarm"
                }
              ],
              "InsufficientDataActions": [],
              "Dimensions": [
                {
                  "Name": "FunctionName",
                  "Value": {
                    "Ref": "ContactMeLambdaFunction"
                  }
                }
              ],
              "TreatMissingData": "missing",
              "Statistic": "Average"
            }
          },
          "DynamoDbTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "messages-test",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-web-backend-test-ServerlessDeploymentBucketName"
            }
          },
          "ContactMeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ContactMeLambdaVersionYP8QQnLgvNQr1GUH23kibNs56XIiL0TIHkGZhuuYOE"
            },
            "Export": {
              "Name": "sls-web-backend-test-ContactMeLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/test"
                ]
              ]
            },
            "Export": {
              "Name": "sls-web-backend-test-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "customDomain": {
        "domainName": "api.charliemoukbel.com",
        "basePath": "test",
        "stage": "test",
        "createRoute53Record": true
      },
      "alerts": {
        "stages": [
          "test",
          "prod"
        ],
        "topics": {
          "alarm": {
            "topic": "web-backend-test-alerts-alarm",
            "notifications": [
              {
                "protocol": "email",
                "endpoint": "matthewriley.charliemoukbel+test@gmail.com"
              }
            ]
          }
        },
        "alarms": [
          "functionErrors",
          "functionThrottles",
          "functionInvocations",
          "functionDuration"
        ]
      }
    },
    "plugins": [
      "serverless-domain-manager",
      "serverless-plugin-aws-alerts"
    ],
    "pluginsData": {},
    "functions": {
      "contactMe": {
        "handler": "src/lambda.handler",
        "events": [
          {
            "http": {
              "path": "contact-me",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "web-backend-test-contactMe",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "ContactMeLambdaVersionYP8QQnLgvNQr1GUH23kibNs56XIiL0TIHkGZhuuYOE"
      }
    },
    "resources": {
      "Resources": {
        "DynamoDbTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "messages-test",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "web-backend",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/mattriley/Home/Code/charliemoukbel/backend/.serverless/web-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/web-backend/test/1657361896020-2022-07-09T10:18:16.020Z",
    "artifact": "web-backend.zip"
  }
}